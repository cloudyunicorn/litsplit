// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  totalBalance  Decimal   @default(0) @db.Decimal(12, 2)
  groups        Group[]   @relation("GroupMembers")
  expensesPaid  Expense[] @relation("PaidByUser")
  expensesOwed  Expense[] @relation("SplitWithUsers")

  accounts      Account[]
  sessions      Session[]
}

model Group {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  members   User[]    @relation("GroupMembers")
  expenses  Expense[]
  createdAt DateTime  @default(now())
}

model Expense {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount      Decimal  @default(0) @db.Decimal(12, 2)
  description String
  paidById    String   @db.Uuid
  paidBy      User     @relation("PaidByUser", fields: [paidById], references: [id])
  groupId     String?  @db.Uuid
  group       Group?   @relation(fields: [groupId], references: [id])
  splitWith   User[]   @relation("SplitWithUsers")
  createdAt   DateTime @default(now())
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
