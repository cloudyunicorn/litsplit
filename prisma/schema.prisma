// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SplitType {
  EQUAL
  PERCENTAGE
  EXACT
}

model User {
  id                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String      @default("NO_NAME")
  email             String      @unique(map: "user_email_idx")
  emailVerified     DateTime?   @db.Timestamp(6)
  image             String?
  password          String?
  role              String      @default("user")
  totalBalance      Decimal     @default(0) @db.Decimal(12, 2)
  preferredCurrency String      @default("USD")

  userGroups        UserGroup[]
  expensesPaid      Expense[]   @relation("PaidByUser")
  creditorDebts     Debt[]      @relation("CreditorDebts")
  debtorDebts       Debt[]      @relation("DebtorDebts")
  invitations       Invitation[]
  accounts          Account[]
  sessions          Session[]

  createdAt         DateTime    @default(now()) @db.Timestamp(6)
  updatedAt         DateTime    @updatedAt

  @@index([email])
  @@index([createdAt])
}

model UserGroup {
  userId    String    @db.Uuid
  groupId   String    @db.Uuid
  balance   Decimal   @default(0) @db.Decimal(12, 2)

  user      User      @relation(fields: [userId], references: [id])
  group     Group     @relation(fields: [groupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, groupId])
  @@index([groupId])
}

model Group {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  currency  String      @default("USD")
  isDeleted Boolean    @default(false)
  deletedAt DateTime?
  
  // Relations
  userGroups UserGroup[]
  expenses   Expense[]
  debts      Debt[]
  invitations  Invitation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
}

model Expense {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount      Decimal   @default(0) @db.Decimal(12, 2)
  description String
  splitType   SplitType @default(EQUAL)
  splits      Json // Stores split details (percentages/exact amounts)
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?

  paidById    String    @db.Uuid
  paidBy      User      @relation("PaidByUser", fields: [paidById], references: [id])
  groupId     String?   @db.Uuid
  group       Group?    @relation(fields: [groupId], references: [id])
  debts       Debt[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt

  @@index([groupId])
  @@index([paidById])
  @@index([createdAt])
}

model Debt {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount     Decimal  @db.Decimal(12, 2)
  currency   String   @default("USD")
  settled    Boolean  @default(false)

  creditorId String   @db.Uuid
  creditor   User    @relation("CreditorDebts", fields: [creditorId], references: [id])
  debtorId   String   @db.Uuid
  debtor     User    @relation("DebtorDebts", fields: [debtorId], references: [id])
  expenseId  String   @db.Uuid
  expense    Expense @relation(fields: [expenseId], references: [id])
  groupId    String   @db.Uuid
  group      Group   @relation(fields: [groupId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([creditorId])
  @@index([debtorId])
  @@index([expenseId])
  @@index([groupId])
}

model Invitation {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String
  groupId   String   @db.Uuid
  senderId  String   @db.Uuid
  status    String   @default("PENDING") // PENDING, ACCEPTED, DECLINED

  group     Group    @relation(fields: [groupId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, groupId])
  @@index([groupId])
  @@index([senderId])
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}


model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
